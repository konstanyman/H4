x=3+2
y=-2*2
x=x+2
rm(x)
rm(x)
rm(list=ls())
x=3+2
y=-2*2
x=x+2
rm(x)
rm(list=ls())
x<-5L
class(x)
x<-x+0.5
class(x)
4<=2 & 6>3
x <- x+2
x <- 6<7
x <- x+2
rm(x)
rm(x)
x <- 6<7
x <- x+2
rm(x)
x<-9:3
x-y
x<-c(5,1,8,6,14,7,2)
y<-c(4,-2.5)
x-y
x<-c(5,1,8,6,14,7,2)
y<-c(4,2.5)
x-y
sum(1:100)
length(c(1:15,6:36,24:5))
x<-c(9,5,7,1,6,4,2,8)
y<-c(8,4,10,3,1,6,12,3)
x<=5
y>x
rep(c(4,2,7),times=c(2,3,5))
x <- 3:8
x[-c(2,4)]
x[x>5]<-5
matrix(0, nrow=3, ncol=3)
matrix(20:7,ncol=4)
a <- c("Adam", "Caroline", "Joseph", "Max", "Patricia")
b <- c(3200, 3000, 2900, 3500, 4000)
c <- c(2011, 2015, 2017, 2008, 2003)
df <- data.frame(a,b,c)
a <- c("Adam", "Caroline", "Joseph", "Max", "Patricia")
b <- c(3200, 3000, 2900, 3500, 4000)
c <- c(2011, 2015, 2017, 2008, 2003)
df <- data.frame(a,b,c)
df
a <- c("Adam", "Caroline", "Joseph", "Max", "Patricia")
b <- c(3200, 3000, 2900, 3500, 4000)
c <- c(2011, 2015, 2017, 2008, 2003)
df <- data.frame(a,b,c)
names(df) <- c("name", "salary", "start_year")
df
a <- c("Adam", "Caroline", "Joseph", "Max", "Patricia")
b <- c(3200, 3000, 2900, 3500, 4000)
c <- c(2011, 2015, 2017, 2008, 2003)
df <- data.frame(a,b,c)
names(df) <- c("name", "salary", "start_year")
row.names(df) <- c("A", "B", "C", "D", "E")
df
grep("R", LETTERS)
grep("A|B|C", LETTERS)
rep("[Dd]", c(LETTERS, letters))
grep("[Dd]", c(LETTERS, letters))
set.seed(10)
randomletters <- letters[sample(1:26, 100, replace = T)]
grep("x",randomletters)
solve(a,b)
a <- matrix(c(3,1,2,1), nrow = 2)
b <- matrix(c(5,3), nrow = 2)
solve(a,b)
uniroot(function(x) x^2-1, interval = c(-2, 0))
library()
search()
x = 2
set.seed(10)
x -> rnorm(20, 0, 1)
set.seed(10)
rnorm(20, 0, 1)
x -> rnorm(20, 0, 1)
set.seed(10)
x <- rnorm(20, 0, 1)
faithful
mean(faithful§eruptions)
mean(faithful§waiting)
mean(faithful§eruptions)
mean(faithful§waiting)
mean(faithful§eruptions)
mean(faithful[, 2])
mean(faithful[, 1])
mean(faithful[, 2])
mean(faithful$eruptions)
mean(faithful$waiting)
sqrt(var(2.5))
sqrt(16.00)
var(faithful$eruptions)
sqrt(var(faithful$eruptions))
sqrt(184.8233)
sqrt(1.2979)
length(faithful$eruptions)
for(data in faithful$eruptions) {
print(data)
}
summa <- 0
for(data in faithful$eruptions) {
summa <- summa + (data - mean(faithful$eruptions))^2
}
print(summa)
(1/length(faithful$eruptions)-1)*summa
(1/(length(faithful$eruptions)-1))*summa
var(faithful$eruptions)
summa <- 0
for(data in faithful$eruptions) {
summa <- summa + (data - mean(faithful$eruptions))^2
}
print(summa)
(1/(length(faithful$eruptions)-1))*summa
satunnaisotos(n = 100, mu = 1, sigma = 0.5)
satunnaisotos = function(n, mu, sigma){
# rnorm generoi satunnaismuuttujia annetuin parametrein
otos = rnorm(n = n, mean = mu , sd = sigma)
# return komennolla voidaan määrätä, mitä funktio palauttaa käyttäjälle
# Nyt palautetaan lista, joka sisältää generoidun otoksen otoskeskiarvon ja otosvarianssin
return(list("Otoskeskiarvo" = mean(otos), "Otosvarianssi" = var(otos)))
}
# Funktiota voidaan kutsua itse valitsemilla parametreilla
# Valitaan esimerkiksi
# n = 100 (otoskoko), mu = 1 (odotusarvo), sigma = 0.5 (keskihajonta)
satunnaisotos(n = 100, mu = 1, sigma = 0.5)
satunnaisotos(n = 100, mu = 1, sigma = 0.5)
satunnaisotos(n = 100, mu = 1, sigma = 0.5)
luottamusvalit = function(n, mu, sigma, alpha) {
# generoidaan satunnaisotos
otos             = rnorm(n = n, mean = mu, sd = sigma)
# lasketaan otoskeskiarvo ja -hajonta
otoskeskiarvo    = mean(otos)
otoskeskihajonta = sd(otos)
# lasketaan virhemarginaali
virhemarginaali  = abs(qnorm((1-alpha)/2)) * otoskeskihajonta/sqrt(n)
# lasketaan luottamusvälit
print(paste0("Luottamusvälin alaraja: ", otoskeskiarvo - virhemarginaali))
print(paste0("Luottamusvälin yläraja: ", otoskeskiarvo + virhemarginaali))
}
set.seed(123)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.999)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.5)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.6)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.7)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.8)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.9)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 1)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.999)
luottamusvalit(n = 10, mu = 10, sigma = 5, alpha = 0.999)
luottamusvalit(n = 100, mu = 10, sigma = 5, alpha = 0.999)
luottamusvalit(n = 1000, mu = 10, sigma = 5, alpha = 0.999)
luottamusvalit(n = 10000, mu = 10, sigma = 5, alpha = 0.999)
luottamusvalit(n = 10000000, mu = 10, sigma = 5, alpha = 0.999)
data("mtcars")
malli1 = lm(mpg ~ wt, data = mtcars)
summary(malli1)
pnorm(5,4,0.2)
pnorm(5,4,0.02)
pnorm(5,4,0.2)
qnorm(0.0125,4,0.2)
qnorm(0.01,4,10)
pnorm(5,4,0.3)
pnorm(5,4,0.8)
pnorm(5,4,0.7)
pnorm(5,4,0.78)
pnorm(5,4,0.79)
pnorm(5,4,0.788)
pnorm(5,4,0.785)
pnorm(5,4,0.783)
pnorm(5,4,0.782)
pnorm(5,4,0.781)
pnorm(5,4,0.78)
pnorm(5,4,0.7807)
pnorm(5,4,0.7805)
setwd("C:/Opinnot/Tilastolliset mallit/H4")
library(foreign)
dat<-read.spss("demoaineisto2015r.sav", to.data.frame=TRUE)
attach(dat)
plot(oma_tulo,tvsaasto)
plot(oma_tulo,tvsaasto)
cor.test(oma_tulo, tvsaasto,method="pearson")
cor.test(oma_tulo, tvsaasto,method="spearman")
plot(oma_tulo,tvsaasto)
abline(lm(tvsaasto~oma_tulo))
lm.saasto <- lm(tvsaasto~oma_tulo)
summary(lm.saasto)
plot(fitted(lm.saasto),resid(lm.saasto))
hist(resid(lm.saasto))
plot(fitted(lm.saasto),resid(lm.saasto))
hist(resid(lm.saasto))
plot(ika,evsaasto)
abline(lm(evsaasto~ika))
cor.test(ika, evsaasto,method="pearson")
cor.test(ika, evsaasto,method="spearman")
plot(ika,tvsaasto)
abline(lm(tvsaasto~ika))
cor.test(ika, tvsaasto,method="pearson")
cor.test(ika, tvsaasto,method="spearman")
plot(evsaasto,tvsaasto)
abline(lm(tvsaasto~evsaasto))
cor.test(evsaasto, tvsaasto,method="pearson")
cor.test(evsaasto, tvsaasto,method="spearman")
lm.saasto2 <- lm(tvsaasto~ika+evsaasto)
summary (lm.saasto2)
# jäännösdiagnostiikka
plot(fitted(lm.saasto2),resid(lm.saasto2))
hist(resid(lm.saasto2))
t.test(tvsaasto~omistusa)
t.test(evsaasto~omistusa)
plot(evsaasto,tvsaasto,pch=as.numeric(omistusa))
omistusa.ei <- dat[omistusa=="ei",]
omistusa.on <- dat[omistusa=="on",]
lm.ei <- lm(tvsaasto~evsaasto, data=omistusa.ei)
lm.on <- lm(tvsaasto~evsaasto, data=omistusa.on)
abline(lm.ei)
abline(lm.on)
plot(evsaasto,tvsaasto,pch=as.numeric(omistusa))
omistusa.ei <- dat[omistusa=="ei",]
omistusa.on <- dat[omistusa=="on",]
lm.ei <- lm(tvsaasto~evsaasto, data=omistusa.ei)
lm.on <- lm(tvsaasto~evsaasto, data=omistusa.on)
abline(lm.ei)
abline(lm.on)
attach(omistusa.ei)
cor.test(evsaasto, tvsaasto,method="pearson")
cor.test(evsaasto, tvsaasto,method="spearman")
detach(omistusa.ei)
attach(omistusa.on)
cor.test(evsaasto, tvsaasto,method="pearson")
cor.test(evsaasto, tvsaasto,method="spearman")
detach(omistusa.on)
summary(lm(tvsaasto~evsaasto*omistusa))
# Kovarianssianalyysi
summary(lm(tvsaasto~evsaasto+omistusa))
model <- lm(tvsaasto~evsaasto+omistusa)
install.packages ("emmeans")
library (emmeans)
model.emm <- emmeans(model, "omistusa")
pairs(model.emm)
source("C:/Opinnot/Tilastolliset mallit/H4/demo4_2023.R")
install.packages("emmeans")
install.packages("emmeans")
source("C:/Opinnot/Tilastolliset mallit/H4/demo4_2023.R")
